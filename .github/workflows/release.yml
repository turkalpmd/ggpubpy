name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-publish:
    if: ${{ !contains(github.ref_name, '-') }}
    name: Build and publish to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Verify tag matches project version
        run: |
          python - << 'PY'
          import os, re
          from pathlib import Path
          tag = os.environ.get('GITHUB_REF','').split('/')[-1]
          if not tag.startswith('v'):
              raise SystemExit(f"Tag must start with 'v', got: {tag}")
          tag_ver = tag[1:]
          # Read pyproject version
          text = Path('pyproject.toml').read_text(encoding='utf-8')
          m = re.search(r"^version\s*=\s*\"([^\"]+)\"", text, re.M)
          if not m:
              raise SystemExit('Could not find version in pyproject.toml')
          py_ver = m.group(1)
          # Read __init__ version
          init = Path('ggpubpy/__init__.py').read_text(encoding='utf-8')
          m2 = re.search(r"__version__\s*=\s*\"([^\"]+)\"", init)
          if not m2:
              raise SystemExit('Could not find __version__ in ggpubpy/__init__.py')
          init_ver = m2.group(1)
          if not (py_ver == init_ver == tag_ver):
              raise SystemExit(f"Version mismatch: tag={tag_ver}, pyproject={py_ver}, __init__={init_ver}")
          print(f"Version OK: {tag_ver}")
          PY
      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: python -m build
      - name: Publish package to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPITOKEN }}
